{{
This is intended to fix up the index.html file generated by Pencil.

This is ā config file for a Python script, ApplyRE.py, which reads an input file, 
applies a set regular expressions (as defined by this config file--in that order), 
and saves to an output file. (NOTE: The 'narrow' options below will fail unless 
you also have SFMTools.py in the same location.)

First, please install Python 3.x. (Written and tested with 3.2.) If you know how to use the command prompt, cd to the correct folder and run this to learn more:
python AppleRE.py -h
Otherwise, just make sure that your file is named lexicon.txt and is in the same folder. Then run ApplyRErun.bat. An output file, lexicon-converted.txt, will be created or overwritten. To run it again, both reading and writing to the output file, run ApplyRE.bat. (This can benefit the regex that moves dates down.)
  
This is not in XML, for conciseness and because regular expressions can contain 
all kinds of control characters (escaping those makes things hard to read).
Each regular expression is defined here using exactly the following, on separate lines:
- Description line(s) beginning with ##
- A line beginning with one of the following:
  - broad, indicating that this regex will apply to the entire file broadly (with no special treatment of  SFM markers). ('broad')
  - sfmval, indicating that it should run on all SFM field contents but not on any SFM markers. ('narrow'; often safer but very slow)
  - sfmval:, followed by a space-separated list of SFM fields whose content alone will be modified; no markers will be modified. ('narrow'; often safer but very slow)
  - disable, meaning that this regex should be ignored for now (so that you don't have to delete it or move it elsewhere temporarily)
- The find string
- The replace string
- A blank line
There can be one or many sets of these, and file must end after the last one.
Note that for SFM files, the script is not aware of marker hierarchy, so when modifying the 
"content" of a dictionary sense field (sn), that would just be the immediate content (the 
sense number, if anything), not the fields that are children of sn. It does, however, request
the record marker (e.g. lx) for the sake of SFMTools.py. This is required but can be blank if 
all regexes are broad.
Assumption: the text file is already in unicode (UTF-8).

The use of \n for newline below happens to work well on my version of regex in Python 3.2 on Windows, but not in Eclipse's version of regex. 
I believe it's more standard with Windows files to find one newline using \r\n, and for cross-platform to find (\r\n?|\n) . Or, you can prefix the whole regex with (?s) to enable DOTALL (dot can match newlines), but that's tricky, and then you'll want to do non-greedy matching such as .+? or .*?
}}

SFM record marker: lx

## Fix special character
broad
\%5C
/

## Remove tooltips
broad
title="[^"]+" />
title="" />
